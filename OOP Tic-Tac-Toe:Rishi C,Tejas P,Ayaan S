#The names placed indicate which pieces of code we worked on
#Rishi:
class Board:
    def __init__(self):
        self.board = {
                "TL": " ", "TM": " ", "TR": " ",
                "ML": " ", "MM": " ", "MR": " ",
                "BL": " ", "BM": " ", "BR": " "}

    def print_board(self):
        print(self.board["TL"] + "|" + self.board["TM"] \
            + "|" + self.board["TR"] + "|")
        print("-+" * 3)
        print(self.board["ML"] + "|" + self.board["MM"] \
            + "|" + self.board["MR"] + "|")
        print("-+" * 3)
        print(self.board["BL"] + "|" + self.board["BM"] \
            + "|" + self.board["BR"] + "|")
    #Tejas:
    def _is_valid_move(self, position):
        if self.board[position] == " ":
            return True
        return False

    def change_board(self, position, type):
        if self._is_valid_move(position):
            self.board[position] = type
            return self.board
        return None
    #Tejas + Ayaan:
    def is_winner(self, player):
        if self.board["TL"] == player.type and self.board["TM"] == player.type and self.board["TR"] == player.type or \
        self.board["ML"] == player.type and self.board["MM"] == player.type and self.board["MR"] == player.type or \
        self.board["BL"] == player.type and self.board["BM"] == player.type and self.board["BR"] == player.type or \
        self.board["TL"] == player.type and self.board["ML"] == player.type and self.board["BL"] == player.type or \
        self.board["TM"] == player.type and self.board["MM"] == player.type and self.board["BM"] == player.type or \
        self.board["TR"] == player.type and self.board["MR"] == player.type and self.board["BR"] == player.type or \
        self.board["TL"] == player.type and self.board["MM"] == player.type and self.board["BR"] == player.type or \
        self.board["BL"] == player.type and self.board["MM"] == player.type and self.board["TR"] == player.type:
            return True
        return False

#Rishi:
class Player:
    def __init__(self, type):
        self.type = type

    def __str__(self):
        return "Player {}".format(self.type)

#Ayaan:
class Game:
    def __init__(self):
        self.player1 = Player("X")
        self.player2 = Player("O")
        self.board = Board()
#Tejas:
    def print_valid_entries(self):
        print("""
            TL - Top Left    | TM - Top Middle    | TR - Top Right
            ML - Middle Left | MM - Center        | MR - Middle Right
            BL - Bottom Left | BM - Bottom Middle | BR - bottom right""")
#Tejas:
    def printing_board(self):
        self.board.print_board()

    def change_turn(self, player):
        if player is self.player1:
            return self.player2
        else:
            return self.player1
#Ayaan:
    def won_game(self, player):
        return self.board.is_winner(player)

    def modify_board(self, position, type):
        if self.board.change_board(position, type) is not None:
            return self.board.change_board(position, type)
        else:
            position = input("Not available position. Please, try again: ")
            return self.board.change_board(position, type)

#Ayaan + Rishi
def play():
    game = Game()
    game.print_valid_entries()
    player = game.player1
    num = 9
    while num > 0:
        num -= 1
        game.printing_board()
        position = input("{} turn, what's your move? ".format(player))
        game.modify_board(position, player.type)
        if game.won_game(player):
            print("{} is the Winner!".format(player))
            break
        else:
            player = game.change_turn(player)
    if num == 0:
        print("Game over! It's a tie!")


if __name__ == "__main__":
    play()
